/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.sqli.composablehub.sap.models;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class SAPProductRaw extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4027306901658926644L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SAPProductRaw\",\"namespace\":\"com.sqli.composablehub.sap.models\",\"fields\":[{\"name\":\"code\",\"type\":\"string\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"catalog\",\"type\":\"string\"},{\"name\":\"integration_key\",\"type\":\"string\"},{\"name\":\"catalog_version\",\"type\":\"string\"},{\"name\":\"supercategories\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Supercategories\",\"fields\":[{\"name\":\"code\",\"type\":\"string\"},{\"name\":\"name\",\"type\":\"string\"}]}}},{\"name\":\"localizedAttributes\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"LocalizedAttributes\",\"fields\":[{\"name\":\"language\",\"type\":\"string\"},{\"name\":\"name\",\"type\":[\"string\",\"null\"]}]}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<SAPProductRaw> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<SAPProductRaw> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<SAPProductRaw> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<SAPProductRaw> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<SAPProductRaw> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this SAPProductRaw to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a SAPProductRaw from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a SAPProductRaw instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static SAPProductRaw fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence code;
  private java.lang.CharSequence name;
  private java.lang.CharSequence catalog;
  private java.lang.CharSequence integration_key;
  private java.lang.CharSequence catalog_version;
  private java.util.List<com.sqli.composablehub.sap.models.Supercategories> supercategories;
  private java.util.List<com.sqli.composablehub.sap.models.LocalizedAttributes> localizedAttributes;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public SAPProductRaw() {}

  /**
   * All-args constructor.
   * @param code The new value for code
   * @param name The new value for name
   * @param catalog The new value for catalog
   * @param integration_key The new value for integration_key
   * @param catalog_version The new value for catalog_version
   * @param supercategories The new value for supercategories
   * @param localizedAttributes The new value for localizedAttributes
   */
  public SAPProductRaw(java.lang.CharSequence code, java.lang.CharSequence name, java.lang.CharSequence catalog, java.lang.CharSequence integration_key, java.lang.CharSequence catalog_version, java.util.List<com.sqli.composablehub.sap.models.Supercategories> supercategories, java.util.List<com.sqli.composablehub.sap.models.LocalizedAttributes> localizedAttributes) {
    this.code = code;
    this.name = name;
    this.catalog = catalog;
    this.integration_key = integration_key;
    this.catalog_version = catalog_version;
    this.supercategories = supercategories;
    this.localizedAttributes = localizedAttributes;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return code;
    case 1: return name;
    case 2: return catalog;
    case 3: return integration_key;
    case 4: return catalog_version;
    case 5: return supercategories;
    case 6: return localizedAttributes;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: code = (java.lang.CharSequence)value$; break;
    case 1: name = (java.lang.CharSequence)value$; break;
    case 2: catalog = (java.lang.CharSequence)value$; break;
    case 3: integration_key = (java.lang.CharSequence)value$; break;
    case 4: catalog_version = (java.lang.CharSequence)value$; break;
    case 5: supercategories = (java.util.List<com.sqli.composablehub.sap.models.Supercategories>)value$; break;
    case 6: localizedAttributes = (java.util.List<com.sqli.composablehub.sap.models.LocalizedAttributes>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'code' field.
   * @return The value of the 'code' field.
   */
  public java.lang.CharSequence getCode() {
    return code;
  }


  /**
   * Sets the value of the 'code' field.
   * @param value the value to set.
   */
  public void setCode(java.lang.CharSequence value) {
    this.code = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public java.lang.CharSequence getName() {
    return name;
  }


  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'catalog' field.
   * @return The value of the 'catalog' field.
   */
  public java.lang.CharSequence getCatalog() {
    return catalog;
  }


  /**
   * Sets the value of the 'catalog' field.
   * @param value the value to set.
   */
  public void setCatalog(java.lang.CharSequence value) {
    this.catalog = value;
  }

  /**
   * Gets the value of the 'integration_key' field.
   * @return The value of the 'integration_key' field.
   */
  public java.lang.CharSequence getIntegrationKey() {
    return integration_key;
  }


  /**
   * Sets the value of the 'integration_key' field.
   * @param value the value to set.
   */
  public void setIntegrationKey(java.lang.CharSequence value) {
    this.integration_key = value;
  }

  /**
   * Gets the value of the 'catalog_version' field.
   * @return The value of the 'catalog_version' field.
   */
  public java.lang.CharSequence getCatalogVersion() {
    return catalog_version;
  }


  /**
   * Sets the value of the 'catalog_version' field.
   * @param value the value to set.
   */
  public void setCatalogVersion(java.lang.CharSequence value) {
    this.catalog_version = value;
  }

  /**
   * Gets the value of the 'supercategories' field.
   * @return The value of the 'supercategories' field.
   */
  public java.util.List<com.sqli.composablehub.sap.models.Supercategories> getSupercategories() {
    return supercategories;
  }


  /**
   * Sets the value of the 'supercategories' field.
   * @param value the value to set.
   */
  public void setSupercategories(java.util.List<com.sqli.composablehub.sap.models.Supercategories> value) {
    this.supercategories = value;
  }

  /**
   * Gets the value of the 'localizedAttributes' field.
   * @return The value of the 'localizedAttributes' field.
   */
  public java.util.List<com.sqli.composablehub.sap.models.LocalizedAttributes> getLocalizedAttributes() {
    return localizedAttributes;
  }


  /**
   * Sets the value of the 'localizedAttributes' field.
   * @param value the value to set.
   */
  public void setLocalizedAttributes(java.util.List<com.sqli.composablehub.sap.models.LocalizedAttributes> value) {
    this.localizedAttributes = value;
  }

  /**
   * Creates a new SAPProductRaw RecordBuilder.
   * @return A new SAPProductRaw RecordBuilder
   */
  public static com.sqli.composablehub.sap.models.SAPProductRaw.Builder newBuilder() {
    return new com.sqli.composablehub.sap.models.SAPProductRaw.Builder();
  }

  /**
   * Creates a new SAPProductRaw RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new SAPProductRaw RecordBuilder
   */
  public static com.sqli.composablehub.sap.models.SAPProductRaw.Builder newBuilder(com.sqli.composablehub.sap.models.SAPProductRaw.Builder other) {
    if (other == null) {
      return new com.sqli.composablehub.sap.models.SAPProductRaw.Builder();
    } else {
      return new com.sqli.composablehub.sap.models.SAPProductRaw.Builder(other);
    }
  }

  /**
   * Creates a new SAPProductRaw RecordBuilder by copying an existing SAPProductRaw instance.
   * @param other The existing instance to copy.
   * @return A new SAPProductRaw RecordBuilder
   */
  public static com.sqli.composablehub.sap.models.SAPProductRaw.Builder newBuilder(com.sqli.composablehub.sap.models.SAPProductRaw other) {
    if (other == null) {
      return new com.sqli.composablehub.sap.models.SAPProductRaw.Builder();
    } else {
      return new com.sqli.composablehub.sap.models.SAPProductRaw.Builder(other);
    }
  }

  /**
   * RecordBuilder for SAPProductRaw instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SAPProductRaw>
    implements org.apache.avro.data.RecordBuilder<SAPProductRaw> {

    private java.lang.CharSequence code;
    private java.lang.CharSequence name;
    private java.lang.CharSequence catalog;
    private java.lang.CharSequence integration_key;
    private java.lang.CharSequence catalog_version;
    private java.util.List<com.sqli.composablehub.sap.models.Supercategories> supercategories;
    private java.util.List<com.sqli.composablehub.sap.models.LocalizedAttributes> localizedAttributes;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.sqli.composablehub.sap.models.SAPProductRaw.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.code)) {
        this.code = data().deepCopy(fields()[0].schema(), other.code);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.catalog)) {
        this.catalog = data().deepCopy(fields()[2].schema(), other.catalog);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.integration_key)) {
        this.integration_key = data().deepCopy(fields()[3].schema(), other.integration_key);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.catalog_version)) {
        this.catalog_version = data().deepCopy(fields()[4].schema(), other.catalog_version);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.supercategories)) {
        this.supercategories = data().deepCopy(fields()[5].schema(), other.supercategories);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.localizedAttributes)) {
        this.localizedAttributes = data().deepCopy(fields()[6].schema(), other.localizedAttributes);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
    }

    /**
     * Creates a Builder by copying an existing SAPProductRaw instance
     * @param other The existing instance to copy.
     */
    private Builder(com.sqli.composablehub.sap.models.SAPProductRaw other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.code)) {
        this.code = data().deepCopy(fields()[0].schema(), other.code);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.catalog)) {
        this.catalog = data().deepCopy(fields()[2].schema(), other.catalog);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.integration_key)) {
        this.integration_key = data().deepCopy(fields()[3].schema(), other.integration_key);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.catalog_version)) {
        this.catalog_version = data().deepCopy(fields()[4].schema(), other.catalog_version);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.supercategories)) {
        this.supercategories = data().deepCopy(fields()[5].schema(), other.supercategories);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.localizedAttributes)) {
        this.localizedAttributes = data().deepCopy(fields()[6].schema(), other.localizedAttributes);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'code' field.
      * @return The value.
      */
    public java.lang.CharSequence getCode() {
      return code;
    }


    /**
      * Sets the value of the 'code' field.
      * @param value The value of 'code'.
      * @return This builder.
      */
    public com.sqli.composablehub.sap.models.SAPProductRaw.Builder setCode(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.code = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'code' field has been set.
      * @return True if the 'code' field has been set, false otherwise.
      */
    public boolean hasCode() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'code' field.
      * @return This builder.
      */
    public com.sqli.composablehub.sap.models.SAPProductRaw.Builder clearCode() {
      code = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public java.lang.CharSequence getName() {
      return name;
    }


    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public com.sqli.composablehub.sap.models.SAPProductRaw.Builder setName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.name = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public com.sqli.composablehub.sap.models.SAPProductRaw.Builder clearName() {
      name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'catalog' field.
      * @return The value.
      */
    public java.lang.CharSequence getCatalog() {
      return catalog;
    }


    /**
      * Sets the value of the 'catalog' field.
      * @param value The value of 'catalog'.
      * @return This builder.
      */
    public com.sqli.composablehub.sap.models.SAPProductRaw.Builder setCatalog(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.catalog = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'catalog' field has been set.
      * @return True if the 'catalog' field has been set, false otherwise.
      */
    public boolean hasCatalog() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'catalog' field.
      * @return This builder.
      */
    public com.sqli.composablehub.sap.models.SAPProductRaw.Builder clearCatalog() {
      catalog = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'integration_key' field.
      * @return The value.
      */
    public java.lang.CharSequence getIntegrationKey() {
      return integration_key;
    }


    /**
      * Sets the value of the 'integration_key' field.
      * @param value The value of 'integration_key'.
      * @return This builder.
      */
    public com.sqli.composablehub.sap.models.SAPProductRaw.Builder setIntegrationKey(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.integration_key = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'integration_key' field has been set.
      * @return True if the 'integration_key' field has been set, false otherwise.
      */
    public boolean hasIntegrationKey() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'integration_key' field.
      * @return This builder.
      */
    public com.sqli.composablehub.sap.models.SAPProductRaw.Builder clearIntegrationKey() {
      integration_key = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'catalog_version' field.
      * @return The value.
      */
    public java.lang.CharSequence getCatalogVersion() {
      return catalog_version;
    }


    /**
      * Sets the value of the 'catalog_version' field.
      * @param value The value of 'catalog_version'.
      * @return This builder.
      */
    public com.sqli.composablehub.sap.models.SAPProductRaw.Builder setCatalogVersion(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.catalog_version = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'catalog_version' field has been set.
      * @return True if the 'catalog_version' field has been set, false otherwise.
      */
    public boolean hasCatalogVersion() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'catalog_version' field.
      * @return This builder.
      */
    public com.sqli.composablehub.sap.models.SAPProductRaw.Builder clearCatalogVersion() {
      catalog_version = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'supercategories' field.
      * @return The value.
      */
    public java.util.List<com.sqli.composablehub.sap.models.Supercategories> getSupercategories() {
      return supercategories;
    }


    /**
      * Sets the value of the 'supercategories' field.
      * @param value The value of 'supercategories'.
      * @return This builder.
      */
    public com.sqli.composablehub.sap.models.SAPProductRaw.Builder setSupercategories(java.util.List<com.sqli.composablehub.sap.models.Supercategories> value) {
      validate(fields()[5], value);
      this.supercategories = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'supercategories' field has been set.
      * @return True if the 'supercategories' field has been set, false otherwise.
      */
    public boolean hasSupercategories() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'supercategories' field.
      * @return This builder.
      */
    public com.sqli.composablehub.sap.models.SAPProductRaw.Builder clearSupercategories() {
      supercategories = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'localizedAttributes' field.
      * @return The value.
      */
    public java.util.List<com.sqli.composablehub.sap.models.LocalizedAttributes> getLocalizedAttributes() {
      return localizedAttributes;
    }


    /**
      * Sets the value of the 'localizedAttributes' field.
      * @param value The value of 'localizedAttributes'.
      * @return This builder.
      */
    public com.sqli.composablehub.sap.models.SAPProductRaw.Builder setLocalizedAttributes(java.util.List<com.sqli.composablehub.sap.models.LocalizedAttributes> value) {
      validate(fields()[6], value);
      this.localizedAttributes = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'localizedAttributes' field has been set.
      * @return True if the 'localizedAttributes' field has been set, false otherwise.
      */
    public boolean hasLocalizedAttributes() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'localizedAttributes' field.
      * @return This builder.
      */
    public com.sqli.composablehub.sap.models.SAPProductRaw.Builder clearLocalizedAttributes() {
      localizedAttributes = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public SAPProductRaw build() {
      try {
        SAPProductRaw record = new SAPProductRaw();
        record.code = fieldSetFlags()[0] ? this.code : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.name = fieldSetFlags()[1] ? this.name : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.catalog = fieldSetFlags()[2] ? this.catalog : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.integration_key = fieldSetFlags()[3] ? this.integration_key : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.catalog_version = fieldSetFlags()[4] ? this.catalog_version : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.supercategories = fieldSetFlags()[5] ? this.supercategories : (java.util.List<com.sqli.composablehub.sap.models.Supercategories>) defaultValue(fields()[5]);
        record.localizedAttributes = fieldSetFlags()[6] ? this.localizedAttributes : (java.util.List<com.sqli.composablehub.sap.models.LocalizedAttributes>) defaultValue(fields()[6]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<SAPProductRaw>
    WRITER$ = (org.apache.avro.io.DatumWriter<SAPProductRaw>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<SAPProductRaw>
    READER$ = (org.apache.avro.io.DatumReader<SAPProductRaw>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.code);

    out.writeString(this.name);

    out.writeString(this.catalog);

    out.writeString(this.integration_key);

    out.writeString(this.catalog_version);

    long size0 = this.supercategories.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (com.sqli.composablehub.sap.models.Supercategories e0: this.supercategories) {
      actualSize0++;
      out.startItem();
      e0.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    long size1 = this.localizedAttributes.size();
    out.writeArrayStart();
    out.setItemCount(size1);
    long actualSize1 = 0;
    for (com.sqli.composablehub.sap.models.LocalizedAttributes e1: this.localizedAttributes) {
      actualSize1++;
      out.startItem();
      e1.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize1 != size1)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size1 + ", but element count was " + actualSize1 + ".");

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.code = in.readString(this.code instanceof Utf8 ? (Utf8)this.code : null);

      this.name = in.readString(this.name instanceof Utf8 ? (Utf8)this.name : null);

      this.catalog = in.readString(this.catalog instanceof Utf8 ? (Utf8)this.catalog : null);

      this.integration_key = in.readString(this.integration_key instanceof Utf8 ? (Utf8)this.integration_key : null);

      this.catalog_version = in.readString(this.catalog_version instanceof Utf8 ? (Utf8)this.catalog_version : null);

      long size0 = in.readArrayStart();
      java.util.List<com.sqli.composablehub.sap.models.Supercategories> a0 = this.supercategories;
      if (a0 == null) {
        a0 = new SpecificData.Array<com.sqli.composablehub.sap.models.Supercategories>((int)size0, SCHEMA$.getField("supercategories").schema());
        this.supercategories = a0;
      } else a0.clear();
      SpecificData.Array<com.sqli.composablehub.sap.models.Supercategories> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<com.sqli.composablehub.sap.models.Supercategories>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          com.sqli.composablehub.sap.models.Supercategories e0 = (ga0 != null ? ga0.peek() : null);
          if (e0 == null) {
            e0 = new com.sqli.composablehub.sap.models.Supercategories();
          }
          e0.customDecode(in);
          a0.add(e0);
        }
      }

      long size1 = in.readArrayStart();
      java.util.List<com.sqli.composablehub.sap.models.LocalizedAttributes> a1 = this.localizedAttributes;
      if (a1 == null) {
        a1 = new SpecificData.Array<com.sqli.composablehub.sap.models.LocalizedAttributes>((int)size1, SCHEMA$.getField("localizedAttributes").schema());
        this.localizedAttributes = a1;
      } else a1.clear();
      SpecificData.Array<com.sqli.composablehub.sap.models.LocalizedAttributes> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<com.sqli.composablehub.sap.models.LocalizedAttributes>)a1 : null);
      for ( ; 0 < size1; size1 = in.arrayNext()) {
        for ( ; size1 != 0; size1--) {
          com.sqli.composablehub.sap.models.LocalizedAttributes e1 = (ga1 != null ? ga1.peek() : null);
          if (e1 == null) {
            e1 = new com.sqli.composablehub.sap.models.LocalizedAttributes();
          }
          e1.customDecode(in);
          a1.add(e1);
        }
      }

    } else {
      for (int i = 0; i < 7; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.code = in.readString(this.code instanceof Utf8 ? (Utf8)this.code : null);
          break;

        case 1:
          this.name = in.readString(this.name instanceof Utf8 ? (Utf8)this.name : null);
          break;

        case 2:
          this.catalog = in.readString(this.catalog instanceof Utf8 ? (Utf8)this.catalog : null);
          break;

        case 3:
          this.integration_key = in.readString(this.integration_key instanceof Utf8 ? (Utf8)this.integration_key : null);
          break;

        case 4:
          this.catalog_version = in.readString(this.catalog_version instanceof Utf8 ? (Utf8)this.catalog_version : null);
          break;

        case 5:
          long size0 = in.readArrayStart();
          java.util.List<com.sqli.composablehub.sap.models.Supercategories> a0 = this.supercategories;
          if (a0 == null) {
            a0 = new SpecificData.Array<com.sqli.composablehub.sap.models.Supercategories>((int)size0, SCHEMA$.getField("supercategories").schema());
            this.supercategories = a0;
          } else a0.clear();
          SpecificData.Array<com.sqli.composablehub.sap.models.Supercategories> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<com.sqli.composablehub.sap.models.Supercategories>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              com.sqli.composablehub.sap.models.Supercategories e0 = (ga0 != null ? ga0.peek() : null);
              if (e0 == null) {
                e0 = new com.sqli.composablehub.sap.models.Supercategories();
              }
              e0.customDecode(in);
              a0.add(e0);
            }
          }
          break;

        case 6:
          long size1 = in.readArrayStart();
          java.util.List<com.sqli.composablehub.sap.models.LocalizedAttributes> a1 = this.localizedAttributes;
          if (a1 == null) {
            a1 = new SpecificData.Array<com.sqli.composablehub.sap.models.LocalizedAttributes>((int)size1, SCHEMA$.getField("localizedAttributes").schema());
            this.localizedAttributes = a1;
          } else a1.clear();
          SpecificData.Array<com.sqli.composablehub.sap.models.LocalizedAttributes> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<com.sqli.composablehub.sap.models.LocalizedAttributes>)a1 : null);
          for ( ; 0 < size1; size1 = in.arrayNext()) {
            for ( ; size1 != 0; size1--) {
              com.sqli.composablehub.sap.models.LocalizedAttributes e1 = (ga1 != null ? ga1.peek() : null);
              if (e1 == null) {
                e1 = new com.sqli.composablehub.sap.models.LocalizedAttributes();
              }
              e1.customDecode(in);
              a1.add(e1);
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










